
class Version {
    name: String
    hash: String ("")
    n1: uint (0)
    n2: uint (0)
    n3: uint (0)
    can_compare: bool (false)

    static fn new(v: String) SELF !invalid {
        if v.starts_with("v") || v.starts_with("V") : v = v.part(1, v.length)

        let res = Version {
            name: v
        }

        let parts = v.split(".")
        if parts.length == 3 {
            let all_ints = true
            each parts as part : if !part.is_integer() : all_ints = false
            if all_ints {
                res.n1 (parts.get(0) !? "0").to_uint() !? 0
                res.n2 (parts.get(1) !? "0").to_uint() !? 0
                res.n3 (parts.get(2) !? "0").to_uint() !? 0
                res.can_compare = true
            }
        }
        return res
    }

    fn str() String $to {
        return this.name
    }

    // Compare
    fn eq(v: Version) bool $eq {
        if this.name == v.name : return true
        return this.n1 == v.n1 && this.n2 == v.n2 && this.n3 == v.n3
    }
    fn lt(v: Version) bool $lt {
        if !this.can_compare : return true
        if this.n1 < v.n1 : return true
        if this.n2 < v.n2 : return true
        if this.n3 < v.n3 : return true
        return false
    }
    fn lte(v: Version) bool $lte {
        return this.lt(v) || this.eq(v)
    }
    fn gt(v: Version) bool $gt {
        return !this.lte(v)
    }
    fn gte(v: Version) bool $gte {
        return !this.lt(v)
    }
}
