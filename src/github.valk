
use valk:json
use valk:http
use valk:time

fn github_req(method: String, path: String) json:Value !fail {
    let url = "https://api.github.com" + path

    let cache = Cache.get()
    let reqs = cache.data.get("requests")
    let id = #STR(VERSION) + ":%method:%url"
    let req = reqs.get(id)
    let when = req.get("when").int().to(uint)
    let body = req.get("body").string()
    let now = time:mstime()
    if now - when < 10 * 60 * 1000 && !body.is_empty() {
        let data = json:decode(body) !? null
        if isset(data) {
            return data
        }
    }

    // println("REQUEST : %method %url")
    let options = http:Options{}
    options.set_header("User-Agent", "Vpkg package manager " + #STR(VERSION))
    let res = http:request(method, url, options) ! {
        println("# Request failed: " + url)
        throw fail
    }
    if res.status != 200 : throw fail
    //
    let data = json:decode(res.body) ! throw fail
    // Update cache
    req.set("when", json:int_value(now.to(int)))
    req.set("body", json:string_value(res.body))
    cache.save()
    //
    return data
}

fn github_exists(user: String, repo: String) bool {
    let data = github_req("GET", "/repos/%user/%repo") ! return false
    let id = data.get("id").int()
    // println("id: " + id)
    return id != 0
}
