
use valk:json
use valk:fs
use valk:time
use valk:ansi

class Versions {
    vman_latest: String
    vman_current: String
    valk: ?String
}

fn get_versions() Versions {
    let cd = vman_dir()
    let path = cd + "vman.json"
    let data = fs:read(path) !? "{}"
    let conf = json:decode(data) !? json:object_value()

    let vman_latest = conf.get("vman-latest").string()
    let valk_latest : ?String = conf.get("valk-latest").string()
    let last_update = conf.get("last-update").int().to(uint)

    if vman_latest.is_empty() : vman_latest = #STR(VERSION)
    if valk_latest.is_empty() : valk_latest = null

    let now = time:microtime()
    let one_day : uint = 1000 * 1000 * 60 * 60 * 24
    if now - last_update > one_day {
        api_get_versions() -> res {
            if res.has("vman") && res.has("valk") {
                vman_latest = res.get("vman").string()
                valk_latest = res.get("valk").string()

                conf.set("vman-latest", res.get("vman"))
                conf.set("valk-latest", res.get("valk"))
                conf.set("last-update", json:int_value(now.to(int)))
                fs:write(path, conf.encode(true)) _
            }
        }
    }

    return Versions {
        vman_latest: vman_latest
        vman_current: #STR(VERSION)
        valk: valk_latest
    }
}

fn vman_is_up_to_date(vv: Versions) bool {
    let v_current = Version.new(vv.vman_current) !? null
    let v_latest = Version.new(vv.vman_latest) !? null
    return isset(v_current) && isset(v_latest) && v_current >= v_latest
}

fn check_vman_versions(vv: Versions) {
    if vman_is_up_to_date(vv) {
        if ansi:supported() : println("# vman is " + "up-to-date".ansi.green())
        else : println("# vman is " + "up-to-date")
    } else {
        println("# There is a new vman version available: " + vv.vman_latest)
        println("# Update command: vman self-update")
    }
}

fn get_version_from_config() String {
    let path = fs:cwd() + div() + "valk.json"

    let data = fs:read(path) ! error("No config found: " + path)

    let json = json:decode(data) ! error("Invalid json in: " + path)
    let version = json.get("valk").string()
    if version.is_empty() : error("No version specified in: " + path)
    return version
}

fn is_valid_version(v: String) bool {
    Version.new(v) ! return false
    return true
}
