
use valk:json
use valk:http
use valk:fs
use valk:core

class Package {
    project: Project
    name: String
    dot_name: String
    id: String
    pkg_dir: String
    ver_dir: String
    repo_dir: String
    src: Source
    ver: Version
    mask: ?Mask (null)
    conf: ?json:Value (null)

    static fn init(project: Project, name: String, version: ?String) Package {

        let src = Source.new(name)
        let user_defined_version = isset(version)

        // Version
        let ver : ?Version = null
        let mask : ?Mask = null
        if !isset(version) : mask = Mask.new("x.x.x")
        if isset(version) && Mask.is_mask(version) : mask = Mask.new(version)
        if isset(version) && !isset(mask) && version != "_" : ver = Version.new(version) ! error("Invalid version syntax: " + version)
        // Find version
        if !isset(ver) {
            ver = src.get_highest_version(mask) ! {
                let vv = src.get_versions()
                if vv.length == 0 : error("Package '%name' hasnt created any versions yet")
                if user_defined_version && isset(mask) : error("Package '%name' has no versions matching: " + mask.name)
                if isset(version) : error("Version '%version' not found")
                error("Package '%name' could not find a version to install")
            }
        }

        let pkg_dir = fs:add(project.vendor_dir, src.name)
        if !fs:exists(pkg_dir) : fs:mkdir(pkg_dir) _
        let ver_dir = fs:add(pkg_dir, ver.name)

        return Package {
            project: project
            name: name
            dot_name: src.name
            id: fs:add(src.name, ver.name)
            pkg_dir: pkg_dir
            ver_dir: ver_dir
            repo_dir: fs:add(cache_repo_dir(), src.name)
            src: src
            ver: ver
            mask: mask
        }
    }

    fn installed() bool {
        return fs:exists(this.ver_dir)
    }
    fn install() {
        this.install_repo()
        //
        let repo_dir = this.repo_dir
        let dest_dir = this.ver_dir
        let vname = this.ver.name

        // Fetch
        let cmd = "cd %repo_dir && git fetch"
        let code, out = core:exec(cmd) ! error("Exec command failed: %cmd")
        if code == 127 : error("Git is not installed")
        if code != 0 : error("Failed to fetch latest package version: %cmd")

        // Checkout version
        cmd = "cd %repo_dir && git checkout %vname"
        (code, out) = core:exec(cmd) ! error("Exec command failed: %cmd")
        if code != 0 : error("Package version not found: %{this.ver.name}")

        // Pull
        cmd = "cd %repo_dir && git pull origin %vname"
        (code, out) = core:exec(cmd) ! error("Exec command failed: %cmd")
        if code != 0 : error("Package version not found: %{this.ver.name}")

        //
        let files = fs:files_in(repo_dir, false)
        if !fs:exists(dest_dir) : fs:mkdir(dest_dir) _
        each files as file {
            let fn = fs:basename(file)
            if fn == ".git" : continue
            fs:copy(file, fs:add(dest_dir, fn), true) _
        }
    }
    fn install_repo() {
        let dir = this.repo_dir
        if fs:exists(dir) : return
        let url = this.clone_url()
        let cmd = "git clone %url %dir"
        core:exec(cmd) ! error("Failed to clone package: %cmd")
    }

    fn clone_url() String {
        return "https://github.com/%{this.src.user_name}/%{this.src.repo_name}.git"
    }

    fn config() json:Value {
        let conf = this.conf
        if isset(conf) : return conf

        let path = fs:add(this.repo_dir, "valk.json")
        let str = fs:read(path) ! error("Package is missing a valk.json config: " + path)
        conf = json:decode(str) ! error("Invalid json syntax in config: " + path)

        this.conf = conf
        return conf
    }
}
