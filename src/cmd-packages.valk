
fn help_intro_pkg_commands() {
    println(emo("ðŸ“¦", "#") + " Package commands (WIP)");
    print("\n")
    println(" vpkg install         Install pacakages defined in the valk.json config");
    println(" vpkg install {pkg}   Install pacakage");
    println(" vpkg remove {pkg}    Remove pacakage");
}


fn cmd_package_install(args: Array[String], options: Map[String]) {
    // Source
    let name = args.get(0) ! help(1)
    let src = Source.new(name)
    // Version
    let version : ?Version = null
    let version_str = args.get(1) !? null
    if isset(version_str) : version = Version.new(version_str) ! error("Invalid version syntax: " + version_str)
    // Validate version
    let versions = src.get_versions()
    if isset(version) {
        if !versions.contains(version) : error("Version '%version' does not exist")
    } else : version = src.get_highest_version() ! error("Package '%name' hasnt created any versions yet")

    println(version.name)
    return

    // Project
    let p = Project.new()
    // Pkg
    let pkg = Package.init(src, version)
    p.packages.set(pkg.id, pkg)
    // Check if installed

    // Source


    each versions as v {
        println("V: %{v.name} | %{v.hash}")
    }
}

fn cmd_package_remove(args: Array[String], options: Map[String]) {
}