
use valk:fs
use valk:json

class Project {
    dir: String
    vendor_dir: String
    config_path: String
    config: json:Value
    packages: Map[Package] (map[Package]{})

    static fn new() SELF {
        let dir = fs:cwd()
        let vendor_dir = fs:add(dir, "vendor")
        if !fs:is_dir(vendor_dir) : fs:mkdir(vendor_dir) ! error("Failed to create directory: " + vendor_dir)
        let config_path = SELF.get_config_path()
        if !fs:exists(config_path) : error("No 'valk.json' config not found: " + config_path)

        let str = fs:read(config_path) !? "{}"
        let data = json:decode(str) ! error("Invalid json syntax in '%config_path'")

        return SELF {
            dir: dir
            vendor_dir: vendor_dir
            config_path: config_path
            config: data
        }
    }

    static fn get_config_path() String {
        let dir = fs:cwd()
        if !fs:is_dir(dir) : fs:mkdir(dir) ! error("Failed to create directory: " + dir)
        return fs:add(dir, "valk.json")
    }

    static fn init_config() {
        let path = SELF.get_config_path()
        if !fs:exists(path) : fs:write(path, "{}") ! error("Failed to create: " + path)
        else : println("# Project already has a 'valk.json' config")
    }

    fn add_pkg_to_config(pkg: Package, name: ?String) {

        if !isset(name) {
            let n = pkg.src.repo_name
            let i : uint = 0
            let len = n.length
            while i < len {
                let ch = n.get(i++)
                if ch.is_alpha() || ch == '_' || (i > 1 && ch.is_number()) : continue
                error("Please provide a package alias because the default is not a valid package name: " + n)
            }
            name = n
        }

        let deps = this.config.get("dependencies")
        let exists = deps.has(name)

        let dep = deps.get(name)
        if exists {
            let n = dep.get("src").string()
            if n != pkg.name : error("Failed to add package to config. Name already used: " + name)
        }
        dep.set_string("src", pkg.name)

        let mask = pkg.mask
        if isset(mask) {
            dep.set_string("version", mask.name)
            dep.set_string("lock", pkg.ver.name)
        } else {
            dep.set_string("version", pkg.ver.name)
            dep.remove("lock")
        }

        fs:write(this.config_path, this.config.encode(true)) ! error("Failed to save file: " + this.config_path)
    }

    fn install_packages() {
        let deps = this.config.get("dependencies").map()

        if deps.length == 0 {
            println("# This project has no dependencies")
            return
        }

        each deps as dep {
            let name = dep.get("src").string()
            let v = dep.get("version").string()
            if dep.has("lock") {
                v = dep.get("lock").string()
            }
            if name.is_empty() : error("Valk.json invalid dependency 'src' -> '%name'")
            if v.is_empty() : error("Valk.json invalid dependency 'version' -> '%v'")

            let pkg = Package.init(this, name, v)
            if !pkg.installed() {
                println("> Installing: %name | %v")
                pkg.install()
            }
        }

        println("# All dependencies have been installed")
    }
}
