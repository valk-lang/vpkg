
use valk:fs
use valk:core

fn help_intro_use() {
    println("üíø Valk version control");
    println("");
    println(" vpkg use 0.0.1       Install valk version 0.0.1");
    println(" vpkg use latest      Install latest version");
    println(" vpkg use             Install valk version defined in project valk.json");
    println("                      Expected config: { \"valk-version\": \"0.0.1\" }");
}

fn help_cmd_use(code: i32, msg: ?String (null)) $exit {

    if isset(msg) {
        println(msg)
        println("-----------------")
    }

    help_intro_use()

    exit(code)
}

fn cmd_use(args: Array[String], options: Array[String]) {

    if options.contains("-h") || options.contains("--help") : help_cmd_use(0)

    let vv = get_versions()

    let version = args.get(0) !? get_version_from_config()

    if version == "latest" {
        let valk_latest = vv.valk
        if !isset(valk_latest) : error("‚ùå vpkg was unable to find out what the latest valk version is")
        version = valk_latest
    }

    if !is_valid_version(version) : error("‚ùå Invalid version syntax: '" + version + "'")

    check_vpkg_versions(vv)

    if is_installed(version) {
        // println("# Version is already installed")
        link_version(version_dir(version))
        println("# Switched to version: " + version)
        return
    }

    println("# Installing version: " + version)

    // Download version
    download_and_unzip_version(version)

    // println("Vpkg current: " + vv.vpkg_current)
    // println("Vpkg latest: " + vv.vpkg_latest)

    link_version(version_dir(version))
}

fn is_installed(version: String) bool {
    #if OS == win
    let path = version_dir(version) + "valk.exe"
    #else
    let path = version_dir(version) + "valk"
    #end
    return fs:exists(path)
}

fn link_version(version_dir: String) {
    let to = version_dir + valk_exe()
    let link = bin_dir() + valk_exe()
    if !fs:exists(to) {
        println("‚ùå Tried to create a symbolic link to a file that does not exist: " + to)
        exit(1)
        return
    }
    if fs:exists(link) {
        fs:remove(link) ! {
            println("‚ö†Ô∏è Failed to remove previous link: " + link)
        }
    }

    #if OS == win
    let cmd = "mklink \"" + link + "\" \"" + to + "\""
    #else
    let cmd = "ln -s \"" + to + "\" \"" + link + "\""
    #end

    let code, out = core:exec(cmd) ! {
        println("‚ùå Link command failed: " + cmd)
        exit(1)
    }
    if code != 0 {
        println("‚ùå Failed to create link: " + link)
        exit(1)
    }

    println("+ Link '" + link + "' to '" + to + "'")
}
